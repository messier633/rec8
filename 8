def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var29 = func2(arg2, arg1)
    var34 = func3(var29, arg1)
    var64 = var37(var34, var29)
    var68 = func7(arg1, var34)
    var73 = func9(var34, var68)
    var74 = var29 ^ (arg2 | ((arg2 | ((982 ^ var29) ^ (arg2 ^ (arg1 & arg2 ^ -95)))) | -135 | arg2) - (arg2 ^ var73 + arg1 ^ var64) + var29 ^ (arg2 - (-531337534 - arg1))) | -966 & 1239593579 ^ var64
    result = var34 | (arg2 ^ (var73 + var34 ^ var29))
    return result
def func9(arg69, arg70):
    var71 = 0
    for var72 in range(29):
        var71 += (var72 - var72) + 7
    return var71
def func6(arg38, arg39):
    if arg38 < arg38:
        var40 = (arg39 ^ 871190628) & arg38 ^ -328113620
    else:
        var40 = (arg38 - arg39 | -176169570) & 490162390
    var41 = -449 & 329489481
    var42 = arg39 - arg39 ^ (-262 & arg38)
    var43 = -730333856 & var41
    var44 = 111 ^ (-321404997 | var41) - var42
    var45 = ((var43 + arg38) | 607991787) & var44
    var46 = var42 - ((arg38 ^ arg38) - 720)
    var47 = (var44 & -552747669 & arg38) | 329
    var48 = var42 + var42
    var49 = var42 | arg39
    var50 = (var46 & var42 + var45) & var45
    var51 = var43 & var46 & arg39 & arg38
    var52 = (arg38 ^ (var47 & var49)) + var47
    var53 = var50 - var45
    var54 = var52 ^ var45
    var55 = var53 & var41 | var50
    var56 = var50 + (var47 - var42) + var42
    var57 = var53 & var44 + var48
    var58 = -734 - var53 - var45 | var46
    var59 = arg39 ^ var42 | var47
    var60 = (var48 & arg39) + var48 + var48
    var61 = var58 ^ arg39 ^ (var56 + var50)
    var62 = (var59 - -294673338) & var44 ^ var50
    var63 = (var53 & arg39) | var52 - var50
    result = (((var50 - (var44 & var42)) & (var50 | var45 + var49)) ^ var56) - var54
    return result
def func5():
    closure = [-6]
    def func4(arg35, arg36):
        closure[0] += func6(arg35, arg36)
        return closure[0]
    func = func4
    return func
var37 = func5()
def func3(arg30, arg31):
    var32 = 0
    for var33 in xrange(9):
        var32 += (var33 ^ arg31) + arg30
    return var32
def func2(arg3, arg4):
    var5 = (arg3 | arg3 + arg4) | arg4
    var6 = arg4 | (var5 + arg4) + arg4
    var7 = 252668426 ^ var5 | 852
    if arg4 < arg4:
        var8 = 749587782 | -876
    else:
        var8 = 87679715 - var5
    var9 = arg4 ^ var5
    if var5 < arg3:
        var10 = arg4 ^ 301 - var5
    else:
        var10 = var6 ^ (-82 | var7) ^ -1032140418
    var11 = arg3 & var7
    var12 = -367 - var11 & var7
    var13 = arg4 & arg3
    var14 = ((var13 + arg4) & var9) - var5
    var15 = arg3 - -1488128614 & (var7 + var12)
    var16 = var9 + (arg4 - var12 | var6)
    var17 = var16 + (1637842383 ^ var7 - var16)
    if arg3 < var12:
        var18 = var5 - var7
    else:
        var18 = var5 | var7
    var19 = arg4 & -42
    var20 = var15 | var9
    var21 = arg3 ^ var12
    var22 = (arg3 & -460 & arg3) + var21
    var23 = var17 & var13 - (arg4 & var9)
    var24 = (var15 | arg3 - var5) + var20
    var25 = var19 - (var12 | var15)
    var26 = var23 ^ var24 + var19 + var16
    var27 = (var23 & var13) - -787
    var28 = var12 + (arg4 ^ var6) ^ var22
    result = var28 & arg4
    return result
def func7(arg65, arg66):
    def func8(acc, rest):
        var67 = (-7 | acc) + rest
        if acc == 0:
            return var67
        else:
            result = func8(acc - 1, var67)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 75'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
